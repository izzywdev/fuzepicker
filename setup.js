#!/usr/bin/env node

// FuzePicker Setup Script
// Helps initialize the project with proper configuration

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log(`
üéØ FuzePicker Setup Wizard
==========================

This script will help you set up FuzePicker with the necessary configuration.
Press Ctrl+C at any time to exit.

`);

async function ask(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function setup() {
  try {
    console.log('üìã Step 1: Backend Configuration\n');

    // Get MongoDB URI
    const mongoDefault = 'mongodb://localhost:27017/fuzepicker';
    const mongoUri = await ask(`MongoDB URI (${mongoDefault}): `) || mongoDefault;

    // Get OpenAI API key (optional)
    const openaiKey = await ask('OpenAI API Key (optional, press Enter to skip): ');

    // Get JWT secret
    const jwtDefault = generateRandomString(32);
    const jwtSecret = await ask(`JWT Secret (${jwtDefault}): `) || jwtDefault;

    // Get port
    const portDefault = '3000';
    const port = await ask(`Server Port (${portDefault}): `) || portDefault;

    // Get environment
    const envDefault = 'development';
    const nodeEnv = await ask(`Environment [development/production] (${envDefault}): `) || envDefault;

    console.log('\nüìù Creating environment configuration...');

    // Create .env file
    const envContent = `# FuzePicker Environment Configuration
# Generated by setup script on ${new Date().toISOString()}

# Database Configuration
MONGODB_URI=${mongoUri}

# OpenAI Configuration (optional)
${openaiKey ? `OPENAI_API_KEY=${openaiKey}` : '# OPENAI_API_KEY=your-openai-api-key-here'}

# Authentication
JWT_SECRET=${jwtSecret}

# Server Configuration
PORT=${port}
NODE_ENV=${nodeEnv}

# Optional Configuration
# CORS_ORIGIN=http://localhost:3000
# LOG_LEVEL=info
# RATE_LIMIT_WINDOW=60000
# RATE_LIMIT_MAX=100
`;

    // Ensure backend directory exists
    if (!fs.existsSync('backend')) {
      fs.mkdirSync('backend');
    }

    fs.writeFileSync('backend/.env', envContent);
    console.log('‚úÖ Created backend/.env');

    // Create .env.example for reference
    const exampleContent = envContent.replace(jwtSecret, 'your-jwt-secret-here');
    fs.writeFileSync('backend/.env.example', exampleContent);
    console.log('‚úÖ Created backend/.env.example');

    console.log('\nüîß Step 2: Extension Configuration\n');

    // Update background.js with correct API endpoint
    const apiEndpoint = `http://localhost:${port}/api`;
    console.log(`‚úÖ API endpoint will be: ${apiEndpoint}`);

    console.log('\nüì¶ Step 3: Dependencies\n');

    // Check if package.json exists in backend
    if (fs.existsSync('backend/package.json')) {
      console.log('‚úÖ Backend package.json found');
      
      const shouldInstall = await ask('Install backend dependencies now? [y/N]: ');
      if (shouldInstall.toLowerCase() === 'y' || shouldInstall.toLowerCase() === 'yes') {
        console.log('Installing dependencies...');
        const { spawn } = require('child_process');
        
        const installProcess = spawn('npm', ['install'], {
          cwd: 'backend',
          stdio: 'inherit'
        });
        
        await new Promise((resolve, reject) => {
          installProcess.on('close', (code) => {
            if (code === 0) {
              console.log('‚úÖ Dependencies installed successfully');
              resolve();
            } else {
              console.log('‚ùå Failed to install dependencies');
              reject(new Error(`npm install failed with code ${code}`));
            }
          });
        });
      }
    } else {
      console.log('‚ö†Ô∏è  Backend package.json not found. Please run this script from the project root.');
    }

    console.log('\nüé® Step 4: Icons\n');

    // Check if icons exist
    if (fs.existsSync('icons/create_icons.js')) {
      const createIcons = await ask('Generate extension icons now? [y/N]: ');
      if (createIcons.toLowerCase() === 'y' || createIcons.toLowerCase() === 'yes') {
        console.log('Generating icons...');
        try {
          require('./icons/create_icons.js');
          console.log('‚úÖ Icons generated successfully');
        } catch (error) {
          console.log('‚ùå Failed to generate icons:', error.message);
        }
      }
    }

    console.log('\nüéâ Setup Complete!\n');

    console.log('Next Steps:');
    console.log('===========');
    console.log('1. Start MongoDB (if using local instance)');
    console.log('2. Start the backend server:');
    console.log('   cd backend && npm start');
    console.log('3. Load the Chrome extension:');
    console.log('   - Go to chrome://extensions/');
    console.log('   - Enable Developer mode');
    console.log('   - Click "Load unpacked"');
    console.log('   - Select this project directory');
    console.log('4. Test the extension on any webpage!');

    if (openaiKey) {
      console.log('\nü§ñ AI Features:');
      console.log('Your OpenAI API key is configured. AI features will work normally.');
    } else {
      console.log('\nü§ñ AI Features:');
      console.log('No OpenAI API key provided. AI features will use fallback responses.');
      console.log('You can add your API key to backend/.env later to enable full AI functionality.');
    }

    console.log('\nüìö Documentation:');
    console.log('- README.md: Full project documentation');
    console.log('- API endpoints: http://localhost:' + port + '/api');
    console.log('- Icon preview: icons/preview.html');

    rl.close();

  } catch (error) {
    console.error('\n‚ùå Setup failed:', error.message);
    rl.close();
    process.exit(1);
  }
}

function generateRandomString(length) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
  console.log('\n\nüëã Setup cancelled by user.');
  rl.close();
  process.exit(0);
});

// Start setup if run directly
if (require.main === module) {
  setup();
}

module.exports = { setup }; 